
Expirement1_Aloof.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011f1  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d36  00000000  00000000  000015c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ba  00000000  00000000  000022ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  000029bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ea  00000000  00000000  00002ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000390  00000000  00000000  000030ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000344a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  68:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  6c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  70:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  74:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  7c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  80:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  84:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  88:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  8c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  90:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  94:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  98:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  9c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  ac:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  bc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  dc:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <GPIO_Input_init>:
 *  GPIO_DDR determines if a pin is an input or output, and 0 means input
 *  GPIO_PIN controls the pullup resistors for those pins
 *  returns: none
 */
void GPIO_Input_init( volatile GPIO_t * port_addr, uint8_t pinmask)
{
  e4:	fc 01       	movw	r30, r24
	port_addr -> GPIO_DDR &= ~pinmask;
  e6:	81 81       	ldd	r24, Z+1	; 0x01
  e8:	96 2f       	mov	r25, r22
  ea:	90 95       	com	r25
  ec:	89 23       	and	r24, r25
  ee:	81 83       	std	Z+1, r24	; 0x01
	port_addr -> GPIO_PIN |= pinmask;
  f0:	80 81       	ld	r24, Z
  f2:	68 2b       	or	r22, r24
  f4:	60 83       	st	Z, r22
  f6:	08 95       	ret

000000f8 <GPIO_Input_read>:
 *  Parameters: the address to the port address, pinmask contains the pin wanting to change
 *  input_temp: temporary variable storing the current input state at that pin number
 *  returns: 1U if pin is high, 0U if low
 */
uint8_t GPIO_Input_read( volatile GPIO_t * port_addr, uint8_t pin)
{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	1f 92       	push	r1
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t input_temp;
	input_temp = (port_addr -> GPIO_PIN) & pin;
 102:	fc 01       	movw	r30, r24
 104:	80 81       	ld	r24, Z
 106:	68 23       	and	r22, r24
 108:	69 83       	std	Y+1, r22	; 0x01
	if(input_temp > 0U)
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	81 11       	cpse	r24, r1
	{
		return 1U;
 10e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0U;
 110:	0f 90       	pop	r0
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <GPIO_Output_init>:
 *
 *  returns: none
 */
 void GPIO_Output_init( volatile GPIO_t * port_addr, uint8_t pinmask)
 {
	 port_addr -> GPIO_DDR |= pinmask;
 118:	fc 01       	movw	r30, r24
 11a:	21 81       	ldd	r18, Z+1	; 0x01
 11c:	62 2b       	or	r22, r18
 11e:	61 83       	std	Z+1, r22	; 0x01
 120:	08 95       	ret

00000122 <GPIO_Output_set>:
 *
 *  returns: none
 */
 void GPIO_Output_set( volatile GPIO_t * port_addr, uint8_t pinmask)
 {
	 port_addr -> GPIO_PORT |= pinmask;
 122:	fc 01       	movw	r30, r24
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	62 2b       	or	r22, r18
 128:	62 83       	std	Z+2, r22	; 0x02
 12a:	08 95       	ret

0000012c <GPIO_Output_clear>:
 *  GPIO_PORT determines the output value, and here it is set low
 *
 *  returns: none
 */
 void GPIO_Output_clear( volatile GPIO_t * port_addr, uint8_t pinmask)
 {
 12c:	fc 01       	movw	r30, r24
	 port_addr -> GPIO_PORT &= ~pinmask;
 12e:	92 81       	ldd	r25, Z+2	; 0x02
 130:	60 95       	com	r22
 132:	69 23       	and	r22, r25
 134:	62 83       	std	Z+2, r22	; 0x02
 136:	08 95       	ret

00000138 <main>:
#include "switches.h"
#include <util/delay.h>


int main(void)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	1f 92       	push	r1
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
	//Initializing LEDs & Switches
	GPIO_Output_init(LED0,LED0_MASK);
 142:	60 e8       	ldi	r22, 0x80	; 128
 144:	86 e2       	ldi	r24, 0x26	; 38
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 8c 00 	call	0x118	; 0x118 <GPIO_Output_init>
	SWITCH_init(SW0,SW0_MASK);
 14c:	60 e4       	ldi	r22, 0x40	; 64
 14e:	86 e2       	ldi	r24, 0x26	; 38
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 fe 00 	call	0x1fc	; 0x1fc <SWITCH_init>
			
	volatile uint8_t numpressed;	//represents amount of button pressed (mode #)
	numpressed = 0U;				//initialize our variable to mode 0
 156:	19 82       	std	Y+1, r1	; 0x01
	
	GPIO_Output_set(LED0,LED0_MASK);		//Setting our LED to OFF
 158:	60 e8       	ldi	r22, 0x80	; 128
 15a:	86 e2       	ldi	r24, 0x26	; 38
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_Output_set>
	
    while(1)
	{
		if (SWITCH_press(SW0,SW0_MASK) == 1U)	//if pressed we change modes	
 162:	60 e4       	ldi	r22, 0x40	; 64
 164:	86 e2       	ldi	r24, 0x26	; 38
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 01 01 	call	0x202	; 0x202 <SWITCH_press>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	c9 f7       	brne	.-14     	; 0x162 <main+0x2a>
		{
			numpressed++;						//increment counter to indicate button press (mode #)
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	89 83       	std	Y+1, r24	; 0x01
			switch (numpressed)					//enter the mode switch case
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	51 f0       	breq	.+20     	; 0x190 <main+0x58>
 17c:	18 f0       	brcs	.+6      	; 0x184 <main+0x4c>
 17e:	82 30       	cpi	r24, 0x02	; 2
 180:	69 f0       	breq	.+26     	; 0x19c <main+0x64>
 182:	36 c0       	rjmp	.+108    	; 0x1f0 <main+0xb8>
			{
				case 0U:						//button pressed 0 times (LED off)
					GPIO_Output_set(LED0,LED0_MASK);
 184:	60 e8       	ldi	r22, 0x80	; 128
 186:	86 e2       	ldi	r24, 0x26	; 38
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_Output_set>
					break;
 18e:	e9 cf       	rjmp	.-46     	; 0x162 <main+0x2a>
				case 1U:						//button pressed 1 time (LED on)
					GPIO_Output_clear(LED0,LED0_MASK);
 190:	60 e8       	ldi	r22, 0x80	; 128
 192:	86 e2       	ldi	r24, 0x26	; 38
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 96 00 	call	0x12c	; 0x12c <GPIO_Output_clear>
					break;
 19a:	e3 cf       	rjmp	.-58     	; 0x162 <main+0x2a>
				case 2U:						//button pressed 2 times (flashing mode)
					while(1)
					{
						GPIO_Output_clear(LED0,LED0_MASK);	//LED on
 19c:	60 e8       	ldi	r22, 0x80	; 128
 19e:	86 e2       	ldi	r24, 0x26	; 38
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 96 00 	call	0x12c	; 0x12c <GPIO_Output_clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	81 ee       	ldi	r24, 0xE1	; 225
 1aa:	94 e0       	ldi	r25, 0x04	; 4
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x74>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x7e>
 1b6:	00 00       	nop
						_delay_ms(100);						//wait 0.1s
						GPIO_Output_set(LED0,LED0_MASK);	//LED off
 1b8:	60 e8       	ldi	r22, 0x80	; 128
 1ba:	86 e2       	ldi	r24, 0x26	; 38
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_Output_set>
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	87 e8       	ldi	r24, 0x87	; 135
 1c6:	93 e1       	ldi	r25, 0x13	; 19
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0x90>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x9a>
 1d2:	00 00       	nop
						_delay_ms(400);						//wait 0.4s
						if (SWITCH_press(SW0,SW0_MASK) == 1U) //if a button is pressed, stop flashing
 1d4:	60 e4       	ldi	r22, 0x40	; 64
 1d6:	86 e2       	ldi	r24, 0x26	; 38
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 01 01 	call	0x202	; 0x202 <SWITCH_press>
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	e9 f6       	brne	.-70     	; 0x19c <main+0x64>
						{		
							break;
						}
					}
					numpressed=0U;	//reset amount of times pressed
 1e2:	19 82       	std	Y+1, r1	; 0x01
					GPIO_Output_set(LED0,LED0_MASK);	//LED off
 1e4:	60 e8       	ldi	r22, 0x80	; 128
 1e6:	86 e2       	ldi	r24, 0x26	; 38
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_Output_set>
					break;
 1ee:	b9 cf       	rjmp	.-142    	; 0x162 <main+0x2a>
				default:								//default mode is off
					GPIO_Output_set(LED0,LED0_MASK);
 1f0:	60 e8       	ldi	r22, 0x80	; 128
 1f2:	86 e2       	ldi	r24, 0x26	; 38
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_Output_set>
					break;
 1fa:	b3 cf       	rjmp	.-154    	; 0x162 <main+0x2a>

000001fc <SWITCH_init>:
 *
 *  returns: none
 */
void SWITCH_init(volatile GPIO_t *port_addr, uint8_t pinmask)
{
	GPIO_Input_init( port_addr,  pinmask);	
 1fc:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_Input_init>
 200:	08 95       	ret

00000202 <SWITCH_press>:
 *  we then wait until the switch is no longer being pressed (to count it as one button press)
 *
 *  returns: 1U if there was a button press, 0U if no press was detected
 */
uint8_t SWITCH_press( volatile GPIO_t *port_addr, uint8_t pinmask)
{
 202:	ef 92       	push	r14
 204:	ff 92       	push	r15
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	1f 92       	push	r1
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
 214:	8c 01       	movw	r16, r24
 216:	f6 2e       	mov	r15, r22
	volatile uint8_t readvalue;
	readvalue = GPIO_Input_read(port_addr,pinmask);
 218:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_Input_read>
 21c:	89 83       	std	Y+1, r24	; 0x01
	if (readvalue == PRESSED)
 21e:	e9 80       	ldd	r14, Y+1	; 0x01
 220:	e1 10       	cpse	r14, r1
 222:	1c c0       	rjmp	.+56     	; 0x25c <SWITCH_press+0x5a>
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	8a e6       	ldi	r24, 0x6A	; 106
 228:	93 e0       	ldi	r25, 0x03	; 3
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <SWITCH_press+0x28>
 232:	00 c0       	rjmp	.+0      	; 0x234 <SWITCH_press+0x32>
 234:	00 00       	nop
	{
		_delay_ms(DEBOUNCE_DELAY);
		readvalue = GPIO_Input_read(port_addr,pinmask);
 236:	6f 2d       	mov	r22, r15
 238:	c8 01       	movw	r24, r16
 23a:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_Input_read>
 23e:	89 83       	std	Y+1, r24	; 0x01
		if (readvalue  == PRESSED)
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	81 11       	cpse	r24, r1
 244:	0c c0       	rjmp	.+24     	; 0x25e <SWITCH_press+0x5c>
		{	
			while(1)
			{
				readvalue = GPIO_Input_read(port_addr,pinmask);
 246:	6f 2d       	mov	r22, r15
 248:	c8 01       	movw	r24, r16
 24a:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_Input_read>
 24e:	89 83       	std	Y+1, r24	; 0x01
				if (readvalue != PRESSED)
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	88 23       	and	r24, r24
 254:	c1 f3       	breq	.-16     	; 0x246 <SWITCH_press+0x44>
				{
					return 1U;
 256:	ee 24       	eor	r14, r14
 258:	e3 94       	inc	r14
 25a:	01 c0       	rjmp	.+2      	; 0x25e <SWITCH_press+0x5c>
				}
			}
		}
	}
	return 0U;
 25c:	e1 2c       	mov	r14, r1
 25e:	8e 2d       	mov	r24, r14
 260:	0f 90       	pop	r0
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	08 95       	ret

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
